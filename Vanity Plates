# In Massachusetts, home to Harvard University, it’s possible to request a vanity license plate for your car, 
# with your choice of letters and numbers instead of random ones. Among the requirements, though, are:

#    “All vanity plates must start with at least two letters.”
#    “… vanity plates may contain a maximum of 6 characters (letters or numbers) and a minimum of 2 characters.”
#    “Numbers cannot be used in the middle of a plate; they must come at the end. For example, AAA222 would be an acceptable … vanity plate; 
#           AAA22A would not be acceptable. The first number used cannot be a ‘0’.”
#    “No periods, spaces, or punctuation marks are allowed.”

# In plates.py, implement a program that prompts the user for a vanity plate and then output Valid if 
# meets all of the requirements or Invalid if it does not. Assume that any letters in the user’s input will be uppercase. 
# Structure your program per the below, wherein is_valid returns True if s meets all requirements and False if it does not. 
# Assume that s will be a str. You’re welcome to implement additional functions for is_valid to call (e.g., one function per requirement).

def main():
    plate = input("Plate: ")
    if is_valid(plate):
        print("valid")
    else:
        print("Invalid")
        main()

def is_valid(vanity):
    van = []
    for c in vanity:
        van.append(c)
    if is_char(van[0]) == False or is_char(van[1]) == False:
        return False
    if len(van) > 6 or len(van) < 2:
        return False
    for v in van:
        if is_char(v) == False and is_didget(v) == False:
            return False
    if didget_mid(van) == True:
        return False
    if first_number_zero(van) == True:
        return False
    else:
        return True

def is_char(c):
    c = c.lower()
    if c == "a" or c == "b" or c == "c" or c == "d" or c == "e" or c == "f" or c == "g" or c == "h" or c == "i" or c == "j" or c == "k":
        return True
    elif c == "l" or c == "m" or c == "n" or c == "o" or c == "p" or c == "q" or c == "r" or c == "s" or c == "t" or c == "u":
        return True
    elif c == "v" or c == "w" or c == "x" or c == "y" or c == "z":
        return True
    else:
        return False

def is_didget(d):
    if d == "0" or d == "1" or d == "2" or d == "3" or d == "4" or d == "5" or d == "6" or d == "7" or d == "8" or d == "9":
        return True
    else:
        return False

def didget_mid(dmv):
    i = 0
    while i < (len(dmv)-1):
        if is_didget(dmv[i]) == True and is_didget(dmv[i+1]) == False:
            return True
        else:
            i += 1
            continue
    if i == len(dmv):
        return False
    
def first_number_zero(zed):
    i = 0
    while i < (len(zed)-1):
        if is_char(zed[i]) and zed[i+1] == "0":
            return True
        else:
            i += 1
            continue
    if i == len(zed):
        return False
    
main()
